/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.iontorrent.views.karyo;

import java.awt.BorderLayout;
import java.awt.Frame;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Chantal Roth
 */
public class KaryoControlPanel extends javax.swing.JPanel {

    private KaryoManager manager;
    private Frame frame;
    private KaryoOverviewPanel view;

    /**
     * Creates new form KaryoControlPanel
     */
    public KaryoControlPanel(Frame frame) {
        initComponents();
        this.frame = frame;
        manager = new KaryoManager(frame);
    }

    public void showPanel(int width, int height) {
        JFrame kframe = new JFrame("Karyotype View");
        kframe.setSize(width, height);
        if (view == null) {
            recreateView();
        }

        kframe.getContentPane().add(this);
        if (frame.getIconImage() != null) {
            kframe.setIconImage(frame.getIconImage());
        }
        kframe.setSize(1200, 800);
        kframe.setVisible(true);
        kframe.toFront();
        // view.test1();
        view.repaint();
    }

    private void recreateView() {
        if (view != null) {
            this.remove(view);
        }
        view = manager.createOverView();
        add("Center", view);
        view.loadTracks();
        panWest.setLayout(new BorderLayout());
        panWest.removeAll();
        
        TrackListPanel trackp = new TrackListPanel(manager);      
        panWest.add("North", trackp);
        
//        FilterListPanel filterp = new FilterListPanel(manager);       
//        panWest.add("South", filterp);
                
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        btnIgv = new javax.swing.JButton();
        btnFilter = new javax.swing.JButton();
        btnConfig = new javax.swing.JButton();
        btnExport = new javax.swing.JButton();
        btnReload = new javax.swing.JButton();
        panSouth = new javax.swing.JPanel();
        panWest = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jToolBar1.setRollover(true);

        btnIgv.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/iontorrent/views/icons/view-list-icons-2.png"))); // NOI18N
        btnIgv.setText(org.openide.util.NbBundle.getMessage(KaryoControlPanel.class, "KaryoControlPanel.btnIgv.text")); // NOI18N
        btnIgv.setToolTipText(org.openide.util.NbBundle.getMessage(KaryoControlPanel.class, "KaryoControlPanel.btnIgv.toolTipText")); // NOI18N
        btnIgv.setFocusable(false);
        btnIgv.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnIgv.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnIgv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIgvActionPerformed(evt);
            }
        });
        jToolBar1.add(btnIgv);

        btnFilter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/iontorrent/views/icons/filter.png"))); // NOI18N
        btnFilter.setText(org.openide.util.NbBundle.getMessage(KaryoControlPanel.class, "KaryoControlPanel.btnFilter.text")); // NOI18N
        btnFilter.setToolTipText(org.openide.util.NbBundle.getMessage(KaryoControlPanel.class, "KaryoControlPanel.btnFilter.toolTipText")); // NOI18N
        btnFilter.setFocusable(false);
        btnFilter.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnFilter.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });
        jToolBar1.add(btnFilter);

        btnConfig.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/iontorrent/views/icons/config.png"))); // NOI18N
        btnConfig.setText(org.openide.util.NbBundle.getMessage(KaryoControlPanel.class, "KaryoControlPanel.btnConfig.text")); // NOI18N
        btnConfig.setToolTipText(org.openide.util.NbBundle.getMessage(KaryoControlPanel.class, "KaryoControlPanel.btnConfig.toolTipText")); // NOI18N
        btnConfig.setFocusable(false);
        btnConfig.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnConfig.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfigActionPerformed(evt);
            }
        });
        jToolBar1.add(btnConfig);

        btnExport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/iontorrent/views/icons/export.png"))); // NOI18N
        btnExport.setText(org.openide.util.NbBundle.getMessage(KaryoControlPanel.class, "KaryoControlPanel.btnExport.text")); // NOI18N
        btnExport.setToolTipText(org.openide.util.NbBundle.getMessage(KaryoControlPanel.class, "KaryoControlPanel.btnExport.toolTipText")); // NOI18N
        btnExport.setFocusable(false);
        btnExport.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnExport.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(btnExport);

        btnReload.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/iontorrent/views/icons/database-refresh.png"))); // NOI18N
        btnReload.setText(org.openide.util.NbBundle.getMessage(KaryoControlPanel.class, "KaryoControlPanel.btnReload.text")); // NOI18N
        btnReload.setToolTipText(org.openide.util.NbBundle.getMessage(KaryoControlPanel.class, "KaryoControlPanel.btnReload.toolTipText")); // NOI18N
        btnReload.setFocusable(false);
        btnReload.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnReload.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnReload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReloadActionPerformed(evt);
            }
        });
        jToolBar1.add(btnReload);

        add(jToolBar1, java.awt.BorderLayout.PAGE_START);
        add(panSouth, java.awt.BorderLayout.PAGE_END);
        add(panWest, java.awt.BorderLayout.LINE_START);
    }// </editor-fold>//GEN-END:initComponents

    private void btnReloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReloadActionPerformed
        recreateView();
    }//GEN-LAST:event_btnReloadActionPerformed

    private void btnConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfigActionPerformed
        manager.pickTracks();
        this.recreateView();
    }//GEN-LAST:event_btnConfigActionPerformed

    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed
        FilterController fil = new FilterController(this.manager);
        int ans = JOptionPane.showConfirmDialog(null, fil, "Pick parameters for filters", JOptionPane.OK_CANCEL_OPTION);
        if (ans == JOptionPane.OK_OPTION) {
            fil.okClicked();
            // now apply filters
            p("Should now apply new filters to tree - redraw?");
            this.recreateView();

        }
    }//GEN-LAST:event_btnFilterActionPerformed

    private void btnIgvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIgvActionPerformed
        if (view.getCurrent_chromosome() == null)  {
             int ans = JOptionPane.showConfirmDialog(null, "Click on a chromosome to select one", "Nothing selected", JOptionPane.OK_OPTION);
             return;
        }
        view.showLocation( view.getCurrent_chromosome(), view.getCurrent_location());
    }//GEN-LAST:event_btnIgvActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfig;
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnFilter;
    private javax.swing.JButton btnIgv;
    private javax.swing.JButton btnReload;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JPanel panSouth;
    private javax.swing.JPanel panWest;
    // End of variables declaration//GEN-END:variables

    private void p(String msg) {
        // Logger.getLogger("KaryoControlPanel").info(msg);
        System.out.println("KaryoControlPanel: " + msg);
    }
}
