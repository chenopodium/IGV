/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.iontorrent.karyo.views;

import com.iontorrent.karyo.data.KaryoTrack;
import com.iontorrent.karyo.renderer.RenderManager;
import com.iontorrent.karyo.renderer.RenderType;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JLabel;
import javax.swing.MutableComboBoxModel;
import org.apache.log4j.Logger;

/**
 *
 * @author Chantal
 */
public class RenderOptionsPanel extends javax.swing.JPanel {

     KaryoTrack track;
     RenderType render;
     RenderManager manager;
     ArrayList<RenderType> renderers;
    /**
     * Creates new form RenderOptionsPanel
     */
    public RenderOptionsPanel( KaryoTrack track) {
        initComponents();
        this.track = track;
        this.render = track.getRenderType();
        manager = new RenderManager();
        ArrayList<RenderType> allrenderers = manager.getRenderTypes();
        renderers = manager.getRenderTypes(allrenderers, track);
        panRenderDetails.setLayout(new BorderLayout());
        this.boxRender.removeAllItems();
        boxRender.setModel(new DefaultComboBoxModel() );
        for (RenderType r: renderers) {
            boxRender.addItem(r);
        }
        p("Adding event listeners to box ");
        this.boxRender.addActionListener(new ActionListener(){

            @Override
            public void actionPerformed(ActionEvent e) {
                p("Action performed");
                 renderSelected();
            }
            
        });
        this.boxRender.addItemListener(new ItemListener(){

            @Override
            public void itemStateChanged(ItemEvent e) {
                 p("ItemListener performed");
                 renderSelected();
            }

            
        });
        if (render == null) render = track.getDefaultRenderer();
        updateRenderDetail();
        // each track has certain render options
    }

    private void renderSelected() {
        p("==== RENDER SELECTED ===");
        render = (RenderType) boxRender.getSelectedItem();
        p("RenderType got selected: "+render);
        if (render != null) {
            track.setRenderType(render);
        }
        updateRenderDetail();
    }
    private void p(String s ){
        Logger.getLogger("RenderOptionPanel").info(s);
        System.out.println("RenderOptionPanel: "+s);
    }
    private void updateRenderDetail() {
        p("updateRenderDetail" );
        panRenderDetails.removeAll();
        if (render == null) {
            this.panRenderDetails.add(new JLabel("No renderer selected"));
            return;
        }
        RenderTypePanel rpanel = new RenderTypePanel(render, track);
        panRenderDetails.add(rpanel);
        invalidate();
        revalidate();
        repaint();
        this.paintImmediately(0,0,1000,1000);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        boxRender = new javax.swing.JComboBox();
        panRenderDetails = new javax.swing.JPanel();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(RenderOptionsPanel.class, "RenderOptionsPanel.jPanel1.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        jPanel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        boxRender.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Single histogram", "Heat map", "Two histograms (for gains/losses)", "Point plot (such as for CNV)", "Chromsome shading", " " }));
        boxRender.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                boxRenderItemStateChanged(evt);
            }
        });
        boxRender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boxRenderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panRenderDetailsLayout = new javax.swing.GroupLayout(panRenderDetails);
        panRenderDetails.setLayout(panRenderDetailsLayout);
        panRenderDetailsLayout.setHorizontalGroup(
            panRenderDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panRenderDetailsLayout.setVerticalGroup(
            panRenderDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 251, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(boxRender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 202, Short.MAX_VALUE))
            .addComponent(panRenderDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(boxRender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panRenderDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void boxRenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boxRenderActionPerformed
        renderSelected();
    }//GEN-LAST:event_boxRenderActionPerformed

    private void boxRenderItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_boxRenderItemStateChanged
        renderSelected();
    }//GEN-LAST:event_boxRenderItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox boxRender;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel panRenderDetails;
    // End of variables declaration//GEN-END:variables
}
