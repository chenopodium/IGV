/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.iontorrent.karyo.filter;

import com.iontorrent.karyo.data.KaryoTrack;
import com.iontorrent.karyo.views.KaryoControlPanel;
import com.iontorrent.karyo.views.KaryoManager;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.TitledBorder;

/**
 *
 * @author Chantal
 */
public class FilterListPanel extends javax.swing.JPanel {

    KaryoManager man;
    JPanel center;
    KaryoControlPanel control;

    /**
     * Creates new form FilterListPanel
     */
    public FilterListPanel(KaryoManager man, boolean showDetail, final KaryoControlPanel control) {
        this.man = man;
        initComponents();
        TitledBorder tit = BorderFactory.createTitledBorder("Filters");
        tit.setTitleFont(new Font("Tahoma", Font.BOLD, 11));
        this.setBorder(tit);
        center = new JPanel();
        this.control = control;
        int nr = man.getKaryotracks().size();

        BoxLayout lay = new BoxLayout(center, BoxLayout.Y_AXIS);
        center.setLayout(lay);
       
        Dimension d = new Dimension(200, 400);
        this.setMinimumSize(d);
        if (control == null) {
            System.out.println("TrackListPanel:  control is null!");
        }
        
        boolean found = false;
        for (KaryoTrack t : man.getKaryotracks()) {
            KaryoFilter f = t.getFilter();
            if (f != null && f.isValid()) {
                found = true;
                
                //if (f.isEnabled()) {
                p("===============  FilterListPanel: Filter trees and count");
                f.resetFilterCount();
                int count = man.filterTrees(f);
                
                int tot = f.getTotalCount();
                int fcount = f.getFilterCount();
                int notapplied = f.getNotAppliedCount();
                //int tot = man.getTotal(f);
                p("========== filtered "+fcount+"  of total "+tot+", not applied: "+notapplied+", fcount="+fcount+", fil="+f);
                FilterListItemPanel li = new FilterListItemPanel( t, f, notapplied, fcount, tot, new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        FilterListItemPanel sel = (FilterListItemPanel)e.getSource();
                        KaryoFilter fil = sel.getFilter();
                        p("============ FilterList enabled box clicked of "+fil+", enabled? "+fil.isEnabled()+", refiltering and redrawing");
                        // redraw
                        control.recreateView(false);
                    }
                    
                });
              
                p("Creating single track panel for " + t.getTrackDisplayName() + ": visible=" + t.isVisible());
                center.add(li);
            }            
        }
        if (!found) {
            center.add(new JLabel("No filters selected"));
        }
        add("Center", center);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnFilter = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        btnFilter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/iontorrent/views/icons/filter.png"))); // NOI18N
        btnFilter.setText(org.openide.util.NbBundle.getMessage(FilterListPanel.class, "FilterListPanel.btnFilter.text")); // NOI18N
        btnFilter.setToolTipText(org.openide.util.NbBundle.getMessage(FilterListPanel.class, "FilterListPanel.btnFilter.toolTipText")); // NOI18N
        btnFilter.setFocusable(false);
        btnFilter.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnFilter.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });
        add(btnFilter, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed
        FilterController fil = new FilterController(this.man);
        if (fil.getNrTracksWithFilters() > 0) {
            int ans = JOptionPane.showConfirmDialog(null, fil, "Pick parameters for filters", JOptionPane.OK_CANCEL_OPTION);
            if (ans == JOptionPane.OK_OPTION) {
                fil.okClicked();
                // now apply filters
                p("Should now apply new filters to tree - redraw?");
                control.recreateView(false);

            }
        }
    }//GEN-LAST:event_btnFilterActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFilter;
    // End of variables declaration//GEN-END:variables

    private void p(String s) {
        Logger.getLogger("FilterListPanel").info(s);
    }
}