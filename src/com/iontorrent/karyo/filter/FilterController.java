/*
*	Copyright (C) 2011 Life Technologies Inc.
*
*   This program is free software: you can redistribute it and/or modify
*   it under the terms of the GNU General Public License as published by
*   the Free Software Foundation, either version 2 of the License, or
*   (at your option) any later version.
*
*   This program is distributed in the hope that it will be useful,
*   but WITHOUT ANY WARRANTY; without even the implied warranty of
*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*   GNU General Public License for more details.
*
*   You should have received a copy of the GNU General Public License
*   along with this program.  If not, see <http://www.gnu.org/licenses/>.
* 
*  @Author Chantal Roth
*/
package com.iontorrent.karyo.filter;

import com.iontorrent.karyo.filter.KaryoFilter;
import com.iontorrent.karyo.data.KaryoTrack;
import com.iontorrent.karyo.views.KaryoManager;
import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;

/**
 *
 * @author Chantal Roth
 */
public class FilterController extends javax.swing.JPanel {

    KaryoManager man;
    
    private ArrayList<KaryoTrack> tracks;
    private HashMap<KaryoTrack, ArrayList<FilterPanel>> filterpanelmap;

    /**
     * Creates new form FilterController
     */
    public FilterController(KaryoManager man) {
        this.man = man;
        filterpanelmap = new HashMap<KaryoTrack, ArrayList<FilterPanel>>();
        initComponents();
        tracks = man.getKaryoTracks();
        DefaultListModel model = new DefaultListModel();
        int nr = 0;
        
        for (KaryoTrack t : tracks) {            
            model.addElement(t);
            nr++;
        }
        this.listTracks.setModel(model);
        panelFilters.setLayout(new GridLayout(5, 1));
        if (nr > 0) {
            this.listTracks.setSelectedIndex(0);
        }
    }

    private void showFiltersForSelectedTrack() {
        // need to keep list of panels
        panelFilters.removeAll();

        KaryoTrack track = (KaryoTrack) listTracks.getSelectedValue();
        if (track == null || track.getPossibleFilters() == null) {
            p("track "+track+" is null or has no filters");
            repaint();
            return;
        }

        ArrayList<FilterPanel> panels = filterpanelmap.get(track);
        if (panels == null) {
            panels = new ArrayList<FilterPanel>();
            ArrayList<KaryoFilter> possfilters = track.getPossibleFilters();
            for (KaryoFilter fil : possfilters) {
                p("Got filter "+fil.getClass().getName()+" for track "+track.getName());
                FilterPanel pan = FilterPanel.createPanel(fil, track);
                if (pan != null) {
                    panels.add(pan);
                }
            }
            filterpanelmap.put(track, panels);
        }
        p("Got "+panels.size()+" filter panels for track "+track.getName());
        for (FilterPanel pan : panels) {
            p("Got filter panel: "+pan.getClass().getName());
            panelFilters.add(pan);
        }
        invalidate();
        revalidate();
        repaint();
        
    }

    public void okClicked() {
        for (KaryoTrack t : tracks) {
            
            ArrayList<FilterPanel> panels = filterpanelmap.get(t);
            if (panels != null) {
                for (FilterPanel pan : panels) {
                    pan.updateFilter();
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listTracks = new javax.swing.JList();
        panelFilters = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();

        jLabel1.setText(org.openide.util.NbBundle.getMessage(FilterController.class, "FilterController.jLabel1.text")); // NOI18N

        listTracks.setToolTipText(org.openide.util.NbBundle.getMessage(FilterController.class, "FilterController.listTracks.toolTipText")); // NOI18N
        listTracks.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listTracksValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listTracks);

        javax.swing.GroupLayout panelFiltersLayout = new javax.swing.GroupLayout(panelFilters);
        panelFilters.setLayout(panelFiltersLayout);
        panelFiltersLayout.setHorizontalGroup(
            panelFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelFiltersLayout.setVerticalGroup(
            panelFiltersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel2.setText(org.openide.util.NbBundle.getMessage(FilterController.class, "FilterController.jLabel2.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 108, Short.MAX_VALUE))
                    .addComponent(panelFilters, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                    .addComponent(panelFilters, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void listTracksValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listTracksValueChanged
        showFiltersForSelectedTrack();
    }//GEN-LAST:event_listTracksValueChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList listTracks;
    private javax.swing.JPanel panelFilters;
    // End of variables declaration//GEN-END:variables

     private void p(String msg) {
        Logger.getLogger("FilterController").info(msg);
    }
     private void err(String msg) {
        Logger.getLogger("FilterController").warning(msg);
    }
    
}
